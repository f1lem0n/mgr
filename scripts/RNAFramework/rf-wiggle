#!/usr/bin/env perl

##
# RF Wiggle
# RNA Framework [http://www.rnaframework.com]
#
# Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
# Summary: Produces WIGGLE track files from RC or XML input files
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use File::Basename;
use FindBin qw($Bin);
use Getopt::Long qw(:config no_ignore_case);

use lib $Bin . "/lib";

use Core::Utils;
use Core::Mathematics qw(:all);
use Data::Sequence::Utils;
use RF::Data::IO::RC;
use RF::Data::IO::XML;
use Term::Constants qw(:screen);

$|++;

my ($coverage, $overwrite, $ratio, $help,
    $keepbases, $blockSize, %stats);
%stats = ( processed => 0,
           failed    => 0 );

do {

    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"          => \$help,
                "c|coverage"      => \$coverage,
                "ow|overwrite"    => \$overwrite,
                "r|ratio"         => \$ratio,
                "kb|keep-bases=s" => \$keepbases,
                "bs|block-size=s" => \$blockSize ) or help(1);

};

$blockSize ||= 1000000;
help() if ($help);

# Default
$keepbases //= "N";

##
# Input validation
##

die "\n  [!] Error: No sample RC/XML file or folder provided\n\n" if (!@ARGV);
die "\n  [!] Error: Options -r and -c are mutually exclusive\n\n" if ($ratio &&
                                                                      $coverage);
die "\n  [!] Error: Invalid IUPAC code\n\n" if ($keepbases !~ m/^all$/i &&
                                                !isiupac($keepbases));
die "\n  [!] Error: Block size must be a positive INT >= 1" if (!isint($blockSize) || $blockSize < 1);
for (@ARGV) { die "\n  [!] Error: Provided path \"" . $_ . "\" doesn't exist\n\n" if (!-e $_); }

$keepbases = $keepbases =~ m/^all$/i ? "ACGT" : join("", sort(uniq(split("", join("", iupac2nt(rna2dna($keepbases)))))));

print "\n[+] Processing input file(s) [Current: none]";

foreach my $input (@ARGV) {

    my ($name, $isxml, $output, @input);
    $name = $input;
    $name =~ s/\/$//;
    $name = fileparse($name, qr/\.[^.]*/);
    $name =~ s/\.(?:xml|rc)$//;
    $output = $name . ($coverage ? ".coverage" : ($ratio ? ".ratio" : undef)) . ".wig";

    print CLRRET . "[+] Processing input file(s) [Current: " . $name . "]";

    if (!-d $input) { # Input is a file

        die "\n\n  [!] Error: File lacks a valid RC/XML extension\n\n" if ($input !~ m/\.(xml|rc)$/);

        push(@input, $input);
        $isxml = 1 if ($input =~ m/\.xml$/);

    }
    else {

        opendir(my $dh, $input) or die "\n\n  [!] Error: Unable to read XML files from directory\n\n";
        while(my $file = readdir($dh)) {

            next if ($file !~ m/\.(xml|rc)$/);

            push(@input, $input . "/" . $file);
            $isxml = 1 if ($file =~ m/\.xml$/);

        }
        closedir($dh);

        die "\n\n  [!] Error: Specified folder doesn't contain any RC/XML file\n\n" unless(@input);

    }

    if (-e $output) {

        if ($overwrite) {

            unlink($output) or die "\n\n  [!] Error: Unable to overwrite output file (" . $! . ")\n\n";

        }
        else { die "\n\n  [!] Error: Output file already exists." .
                   "\n      Please use -ow (or --overwrite) to overwrite it\n\n"; }

    }

    open(my $wh, ">", $output) or die "\n\n  [!] Error: Unable to write output WIGGLE file (" . $! . ")\n\n";
    select((select($wh), $|=1)[0]);

    print $wh "track type=wiggle_0 name=\"" . $name . ($isxml ? " Reactivity" : ($coverage ? " Coverage" : ($ratio ? " Ratio" : " Counts"))) . "\"\n";

    foreach my $file (@input) {

        $stats{processed}++;

        if ($file =~ m/\.xml$/) {

            my ($xmlref, $i, $sequence, @data);

            eval { $xmlref = RF::Data::IO::XML->new(file => $file); };

            if ($@) {

                $stats{failed}++;

                undef($@);

                next;

            }

            $i = 0;
            $sequence = $xmlref->sequence();
            @data = $xmlref->tool() eq "rf-norm" ? $xmlref->reactivity() : ($ratio ? $xmlref->ratio() : $xmlref->score());

            next if (!sum(grep {$_ !~ m/^NaN$/i} @data));

            print $wh "variableStep chrom=" . $xmlref->id() . "\n";

            undef($data[$-[0]]) while($sequence =~ m/[^$keepbases]/g);

            for (@data) {

                $i++;

                print $wh $i . " " . $_ . "\n" if ($_ &&
                                                   !isnan($_));

            }

        }
        else {

            my ($rcio);

            eval { $rcio = RF::Data::IO::RC->new(file => $input); };

            if ($@) {

                $stats{failed}++;

                undef($@);

                next;

            }

            foreach my $id ($rcio->ids()) {

                my $length = $rcio->length($id);

                print $wh "variableStep chrom=" . $id . "\n";

                for(my $i = 0; $i < $length; $i += $blockSize) {

                    print CLRRET . "[+] Processing input file(s) [Current: " . $name . ", " . $id . " (" . sprintf("%.2f", (min($length, $i + $blockSize) / $length * 100)) . "% done)]";

                    my ($j, $end, $entry, $sequence,
                        @counts, @coverage);
                    $end = $i + $blockSize - 1;
                    $end = $length - 1 if ($end >= $length);
                    $entry = $rcio->readBytewise($id, [$i, $end]);

                    next if (($coverage && !sum($entry->coverage())) ||
                             (!$coverage && !sum($entry->counts())));

                    $j = $i;
                    $sequence = $entry->sequence();
                    @counts = $entry->counts();
                    @coverage = $entry->coverage();

                    while($sequence =~ m/[^$keepbases]/g) {

                        undef($counts[$-[0]]);
                        undef($coverage[$-[0]]);

                    }

                    for (0 .. $#coverage) {

                        $j++;

                        if ($coverage[$_]) {

                            if ($coverage) { print $wh $j . " " . $coverage[$_] . "\n"; }
                            elsif ($ratio) { print $wh $j . " " . ($counts[$_] / $coverage[$_]) . "\n" if ($counts[$_]); }
                            else { print $wh $j . " " . $counts[$_] . "\n" if ($counts[$_]); }

                        }

                    }

                }

            }

        }

    }

    close($wh);

}

print CLRRET . "[+] Processing input file(s) [Total: " . $stats{processed} . "]";

if ($stats{failed}) {

    die "\n\n  [!] Error: Parsing failed for all files." .
        "\n      Please check your input and try again\n\n" if ($stats{failed} == $stats{processed});

    warn "\n\n  [!] Warning: Parsing failed for " . $stats{failed} . " files.\n\n";

}

print "\n[+] All done.\n\n";

sub help {

    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);

    die <<HELP;

 RF Wiggle (v$Core::Utils::VERSION)
 RNA Framework [http://www.rnaframework.com]

 Author:  Danny Incarnato (dincarnato[at]rnaframework.com)
 Summary: Produces WIGGLE track files from RC or XML input files

 Usage:   rf-wiggle [Options] Sample.rc
          rf-wiggle [Options] transcript.xml
          rf-wiggle [Options] RC_XML_folder/

 Options                                     Description
 -ow or --overwrite                          Overwrites output file (if the specified file already exists)
 -c  or --coverage                           Reports per-base coverage instead of RT-stop/mutation count
                                             Note: this option only works for RC files
 -r  or --ratio                              Reports per-base ratio between RT-stop/mutation count and coverage for RC files,
                                             or the ratio from rf-modcall XML files
                                             Note: this option only works for RC files or XML files generated with rf-modcall
 -kb or --keep-bases        <string>         Bases to report in the WIGGLE file (Default: N)
 -bs or --block-size        <int>            Defines the size of the memory block (in bp) to process RC files containing whole 
                                             chromosome data (such as that generated by rf-count-genome) (>=1, Default: 1000000)

HELP

}
